variables:
  K8S_API_URL: https://158.160.109.92
  FRONTEND_NAME: yelb-ui
  BACKEND_NAME: yelb-appserver
  APP_NAME:  yelb
  

stages:
  - lint
  - build
  - test
  - cleanup
  - push
  - deploy

lint-yaml:
  stage: lint
  image:
    name: cytopia/yamllint
    entrypoint: ["/bin/ash", "-c"]
  script:
    - yamllint -f colored .
  allow_failure: true



lint-helm:
  stage: lint
  image: alpine/k8s:1.24.15
  script:
    - helm lint .helm
  allow_failure: true



build:backend:
  stage: build
  image: docker:latest
  script:
    - cd $BACKEND_NAME
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$BACKEND_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID .

build:frontend:
  stage: build
  image: docker:latest
  script:
    - cd $FRONTEND_NAME
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$FRONTEND_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID .

test:
  stage: test
  image:
    name: docker/compose:1.23.2
    entrypoint: [""]
  script:
    - docker-compose 
        -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID"
      up
        --abort-on-container-exit
        --exit-code-from test
        --quiet-pull

cleanup:
  stage: cleanup
  image:
    name: docker/compose:1.23.2
    entrypoint: [""]
  script:
    - docker-compose -p "$CI_PROJECT_NAME"_"$CI_PIPELINE_ID" down
  when: always

push:
  environment:
    name: $DEPLOY_VARIABLE
  image: docker:latest
  stage: push
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$BACKEND_NAME-$CI_ENVIRONMENT_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$FRONTEND_NAME-$CI_ENVIRONMENT_NAME:$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
  rules:
    # Использование rules для определения переменных в зависимости от ветки
    - if: '$CI_COMMIT_REF_NAME == "main"'
      variables:
        DEPLOY_VARIABLE: production
    - if: '$CI_COMMIT_REF_NAME != "main"'
      variables:
        DEPLOY_VARIABLE: develop


deploy:
  stage: deploy
  image: centosadmin/kubernetes-helm:latest
  environment:
    name: $DEPLOY_VARIABLE
    

  variables:
    KUBECONFIG: /tmp/.kubeconfig

  script:
    - kubectl config set-cluster k8s --insecure-skip-tls-verify=true --server=$K8S_API_URL
    - kubectl config set-credentials admin --token=$K8S_CI_TOKEN
    - kubectl config set-context default --cluster=k8s --user=admin
    - kubectl config use-context default
    - kubectl cluster-info
    - helm upgrade --install $APP_NAME .helm
        --set yelbappserver.image=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$BACKEND_NAME-$CI_ENVIRONMENT_NAME
        --set yelbappserver.imageTag=$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
        --set yelbappserver.env.YELB_DB_SERVER_ENDPOINT=$YELB_DB_SERVER_ENDPOINT
        --set yelbappserver.env.YELB_DB_SERVER_USER=$YELB_DB_SERVER_USER
        --set yelbappserver.env.YELB_DB_SERVER_PASSWORD=$YELB_DB_SERVER_PASSWORD
        --set yelbappserver.env.YELB_DB_NAME=$YELB_DB_NAME
        --set yelbappserver.env.RACK_ENV=$DEPLOY_VARIABLE
        --set yelbui.image=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$FRONTEND_NAME-$CI_ENVIRONMENT_NAME
        --set yelbui.imageTag=$CI_COMMIT_REF_SLUG.$CI_PIPELINE_ID
        --set yelbui.env.UI_ENV=prod
        --wait
        --timeout 300s
        --atomic
        --debug
        --namespace $APP_NAME-$CI_ENVIRONMENT_NAME
  rules:
    # Использование rules для определения переменных в зависимости от ветки
    - if: '$CI_COMMIT_REF_NAME == "main"'
      
      variables:
        YELB_DB_SERVER_ENDPOINT: $DB_SERVER
        YELB_DB_SERVER_USER: $DB_SERVER_USER
        YELB_DB_SERVER_PASSWORD: $DB_SERVER_PASSWORD
        YELB_DB_NAME: $DB_NAME
        DEPLOY_VARIABLE: production

  

    - if: '$CI_COMMIT_REF_NAME != "main"'
      variables:
        YELB_DB_SERVER_ENDPOINT: $DB_SERVER
        YELB_DB_SERVER_USER: $DB_SERVER_USER_DEV
        YELB_DB_SERVER_PASSWORD: $DB_SERVER_PASSWORD_DEV
        YELB_DB_NAME: $DB_NAME_DEV
        DEPLOY_VARIABLE: develop

      


 
